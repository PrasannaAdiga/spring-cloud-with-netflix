package com.learning.cloud.controller.v1.impl;import com.fasterxml.jackson.core.JsonProcessingException;import com.fasterxml.jackson.databind.ObjectMapper;import com.learning.cloud.controller.v1.IAccountController;import com.learning.cloud.entity.Account;import com.learning.cloud.exception.custom.ResourceFoundException;import com.learning.cloud.exception.custom.ResourceNotFoundException;import com.learning.cloud.repository.AccountRepository;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import org.springframework.web.servlet.support.ServletUriComponentsBuilder;import java.math.BigDecimal;import java.net.URI;import java.util.Collections;import java.util.List;@RestController@Slf4j@RequiredArgsConstructorpublic class AccountController implements IAccountController {    private final AccountRepository accountRepository;    private ObjectMapper objectMapper = new ObjectMapper();    @Override    public ResponseEntity<Account> findByAccountNumber(String accountNumber) {        Account account = checkAccount(accountNumber);        return ResponseEntity.ok().body(account);    }    //TODO: The result should send in the Pagination format    @Override    public ResponseEntity<List<Account>> findByIds(List<String> ids) {        return ResponseEntity.ok().body(accountRepository.findByIds(ids));    }    @Override    public ResponseEntity<Object> create(Account account) {        accountRepository.findByAccountNumber(account.getNumber()).ifPresent(a -> {            throw new ResourceFoundException("Account with number " + a.getNumber() + " already found");        });        Account newAccount = accountRepository.add(account);        URI location = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}").buildAndExpand(newAccount.getId()).toUri();        return ResponseEntity.created(location).build();    }    @Override    public ResponseEntity<Account> update(Account account) {        checkAccount(account.getNumber());        return ResponseEntity.ok().body(accountRepository.update(account));    }    @Override    public ResponseEntity<Void> delete(String accountNumber) {        Account account = checkAccount(accountNumber);        accountRepository.deleteByAccountId(account.getId());        return new ResponseEntity<>(HttpStatus.NO_CONTENT);    }    @Override    public ResponseEntity<Account> withdraw(String accountNumber, int amount) throws JsonProcessingException {        Account account = checkAccount(accountNumber);        log.info("Account found: {}", objectMapper.writeValueAsString(account));        account.setBalance(account.getBalance().subtract(new BigDecimal(amount)));        log.info("Account balance: {}", objectMapper.writeValueAsString(Collections.singletonMap("balance", account.getBalance())));        return ResponseEntity.ok().body(accountRepository.update(account));    }    private Account checkAccount(String id) {        return accountRepository.findByAccountNumber(id).orElseThrow(() -> new ResourceNotFoundException("Account with id " + id + " Not Found!"));    }}