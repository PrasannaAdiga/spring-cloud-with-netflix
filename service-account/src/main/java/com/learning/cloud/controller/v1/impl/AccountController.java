package com.learning.cloud.controller.v1.impl;import com.fasterxml.jackson.core.JsonProcessingException;import com.learning.cloud.controller.v1.IAccountController;import com.learning.cloud.model.AccountDTO;import com.learning.cloud.service.impl.AccountService;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import org.springframework.web.servlet.support.ServletUriComponentsBuilder;import java.net.URI;import java.util.List;import java.util.UUID;@RestController@Slf4j@RequiredArgsConstructorpublic class AccountController implements IAccountController {    private final AccountService accountService;    @Override    public ResponseEntity<AccountDTO> findByAccountNumber(String accountNumber) {        return ResponseEntity.ok().body(accountService.findByAccountNumber(accountNumber));    }    //TODO: The result should send in the Pagination format    @Override    public ResponseEntity<List<AccountDTO>> findByIds(List<UUID> ids) {        return ResponseEntity.ok().body(accountService.findByAccountIds(ids));    }    @Override    public ResponseEntity<Object> create(AccountDTO accountDTO) {        AccountDTO newAccountDTO = accountService.add(accountDTO);        URI location = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}").buildAndExpand(newAccountDTO.getId()).toUri();        return ResponseEntity.created(location).build();    }    @Override    public ResponseEntity<AccountDTO> update(AccountDTO accountDTO) {        return ResponseEntity.ok().body(accountService.update(accountDTO));    }    @Override    public ResponseEntity<Void> delete(UUID accountId) {        accountService.deleteByAccountId(accountId);        return new ResponseEntity<>(HttpStatus.NO_CONTENT);    }    @Override    public ResponseEntity<AccountDTO> withdraw(String accountNumber, int amount) throws JsonProcessingException {        return ResponseEntity.ok().body(accountService.withdraw(accountNumber, amount));    }}